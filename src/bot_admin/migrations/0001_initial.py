# Generated by Django 5.2.5 on 2025-09-08 20:01

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="ServiceLocation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255, verbose_name="Название места")),
                ("description", models.TextField(blank=True, verbose_name="Описание места")),
                ("city", models.CharField(blank=True, max_length=255, verbose_name="Город")),
                ("rest_of_address", models.CharField(blank=True, max_length=512, verbose_name="Улица, дом, квартира")),
                ("latitude", models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name="Широта")),
                ("longitude", models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name="Долгота")),
                ("capacity", models.PositiveIntegerField(default=1, verbose_name="Вместимость")),
            ],
            options={
                "verbose_name": "Место оказания услуги",
                "verbose_name_plural": "Места оказания услуг",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="TelegramUser",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        help_text="\n            Unique identifier for this user or bot.\n            This number may have more than 32 significant bits and some programming\n            languages may have difficulty/silent defects in interpreting it.\n            But it has at most 52 significant bits, so a 64-bit integer or double-precision\n            float type are safe for storing this identifier.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("is_bot", models.BooleanField(help_text="True, if this user is a bot")),
                ("first_name", models.CharField(help_text="User's or bot's first name", max_length=64)),
                ("last_name", models.CharField(blank=True, help_text="Optional. User's or bot's last name", max_length=64, null=True)),
                ("username", models.CharField(blank=True, help_text="Optional. User's or bot's username", max_length=32, null=True)),
                (
                    "language_code",
                    models.CharField(blank=True, help_text="Optional. IETF language tag of the user's language", max_length=15, null=True),
                ),
                (
                    "is_premium",
                    models.BooleanField(blank=True, help_text="Optional. True, if this user is a Telegram Premium user", null=True),
                ),
                (
                    "added_to_attachment_menu",
                    models.BooleanField(
                        blank=True, help_text="Optional. True, if this user added the bot to the attachment menu", null=True
                    ),
                ),
                (
                    "can_join_groups",
                    models.BooleanField(
                        blank=True, help_text="Optional. True, if the bot can be invited to groups. Returned only in getMe.", null=True
                    ),
                ),
                (
                    "can_read_all_group_messages",
                    models.BooleanField(
                        blank=True, help_text="Optional. True, if privacy mode is disabled for the bot. Returned only in getMe.", null=True
                    ),
                ),
                (
                    "supports_inline_queries",
                    models.BooleanField(
                        blank=True, help_text="Optional. True, if the bot supports inline queries. Returned only in getMe.", null=True
                    ),
                ),
                (
                    "can_connect_to_business",
                    models.BooleanField(
                        blank=True,
                        help_text="Optional. True, if the bot can be connected to a Telegram Business\n            account to receive its messages.\n            Returned only in getMe.",
                        null=True,
                    ),
                ),
                (
                    "has_main_web_app",
                    models.BooleanField(
                        blank=True, help_text="Optional. True, if the bot has a main Web App. Returned only in getMe.", null=True
                    ),
                ),
                ("datetime_joined", models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name="RentalObject",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255, verbose_name="Название")),
                ("description", models.TextField(blank=True, verbose_name="Описание")),
                ("minimum_rental_duration", models.TimeField(verbose_name="Минимальное время аренды")),
                (
                    "current_location",
                    models.ManyToManyField(
                        blank=True, related_name="current_location", to="bot_admin.servicelocation", verbose_name="Где находится"
                    ),
                ),
            ],
            options={
                "verbose_name": "Объект аренды",
                "verbose_name_plural": "Объекты аренды",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="TelegramUserProfilePhotos",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("file_id", models.CharField()),
                ("file_unique_id", models.CharField()),
                ("width", models.SmallIntegerField()),
                ("height", models.SmallIntegerField()),
                ("file_size", models.SmallIntegerField()),
                ("tg_user_id", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="bot_admin.telegramuser")),
            ],
        ),
        migrations.CreateModel(
            name="WorkDay",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "day",
                    models.IntegerField(
                        choices=[
                            (0, "Monday"),
                            (1, "Tuesday"),
                            (2, "Wednesday"),
                            (3, "Thursday"),
                            (4, "Friday"),
                            (5, "Saturday"),
                            (6, "Sunday"),
                        ],
                        verbose_name="День недели",
                    ),
                ),
                ("start_time", models.TimeField(blank=True, null=True, verbose_name="Время начала работы")),
                ("end_time", models.TimeField(blank=True, null=True, verbose_name="Время окончания работы")),
            ],
            options={
                "verbose_name": "Рабочее время",
                "verbose_name_plural": "Рабочие времена",
                "ordering": ["day"],
                "unique_together": {("day", "start_time", "end_time")},
            },
        ),
        migrations.AddField(
            model_name="servicelocation",
            name="available_days",
            field=models.ManyToManyField(
                blank=True, related_name="service_locations", to="bot_admin.workday", verbose_name="Доступные дни недели"
            ),
        ),
    ]
